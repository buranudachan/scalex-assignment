{"version":3,"sources":["assets/images/sample.png","module/containers/App/index.tsx","module/containers/App/sidebar.tsx","module/containers/App/users.tsx","module/NextApp.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AppComponent","props","state","userDetail","error","username","password","login","bind","handleUsernameChange","handleEmailChange","e","this","setState","target","value","event","preventDefault","console","log","method","url","data","successResponse","activeUsers","inactiveUsers","userLogs","firstName","lastName","phoneNumber","Address","history","push","pathname","isDashboard","className","id","src","logo","alt","onSubmit","type","name","onChange","placeholder","React","Component","Sidebar","to","columns","title","dataIndex","key","Users","style","width","location","dataSource","NextApp","exact","path","component","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2aa4038e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sample.b35050eb.png\";","import React from 'react';\r\nimport { serviceRequest } from '../../service/serviceRequest';\r\nimport logo from '../../../assets/images/sample.png'\r\n\r\nclass AppComponent extends React.Component<any, any>{\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      userDetail: [],\r\n      error: \"\",\r\n      username: \"\",\r\n      password: \"\"\r\n    };\r\n    this.login = this.login.bind(this);\r\n    this.handleUsernameChange = this.handleUsernameChange.bind(this);\r\n    this.handleEmailChange = this.handleEmailChange.bind(this);\r\n  }\r\n  handleUsernameChange(e: any) {\r\n    this.setState({ username: e.target.value });\r\n\r\n  }\r\n  handleEmailChange(e: any) {\r\n    this.setState({ password: e.target.value });\r\n  }\r\n\r\n  /**User login */\r\n  async login(event: any) {\r\n    event.preventDefault();\r\n\r\n    console.log(this.state)\r\n    const options: any = {\r\n      method: \"post\",\r\n      url: 'https://ic3haoorgj.execute-api.ap-south-1.amazonaws.com/api/auth',\r\n      data: { username: this.state.username, password: this.state.password }\r\n    };\r\n    /**I was  getting forbidden error while calling api thats way commented code*/\r\n    let res: any;// = await serviceRequest.request(options);\r\n    console.log(res)\r\n    if (!res) {\r\n      this.setState({\r\n        error: \"Incorrect Email or password\"\r\n      })\r\n    }\r\n    const successResponse = {\r\n      data: {\r\n        activeUsers: 231,\r\n        inactiveUsers: 454,\r\n        userLogs: [\r\n          {\r\n            firstName: 'Mark',\r\n            lastName: 'Otto',\r\n            phoneNumber: '928-339-5901',\r\n            Address: '1221 Clarksburg Park Road, JBPHH, Hawaii-96860'\r\n          },\r\n          {\r\n            firstName: 'Job',\r\n            lastName: 'Thornton',\r\n            phoneNumber: '528-329-5924',\r\n            Address: '3698'\r\n          },\r\n          {\r\n            firstName: 'Florence',\r\n            lastName: 'freebies',\r\n            phoneNumber: '343-123-5457',\r\n            Address: '3816 Melody Lane, Midlothian, Virginia-23113'\r\n          }\r\n        ]\r\n      }\r\n    };\r\n    this.props.history.push({\r\n      pathname: '/users',\r\n      state: successResponse.data\r\n    });\r\n    this.setState({\r\n      isDashboard: true\r\n    })\r\n  };\r\n  public render() {\r\n    return (\r\n      <div className=\"row p-3\">\r\n        <div className=\"col-lg-7\" id=\"myContainer\">\r\n          <img src={logo} alt=\"No image found\" />\r\n          <div className=\"my-text-center1\">\r\n            Welcome Back!\r\n                </div>\r\n\r\n          <div className=\"my-text-center2\">\r\n            <span> Lead paragraph. Vivamus sagittis lacus vel augue laoreet rutrum faucibus\r\n            dolor auctor. Duis mollis, est non commodo luctus.</span>\r\n          </div>\r\n\r\n\r\n        </div>\r\n        <div className=\"col-lg-5\">\r\n          <div className=\"form-center\">\r\n            <form className=\"text-center\" onSubmit={this.login}>\r\n              <h3 className=\"primary\">Let's Get Started</h3>\r\n              <div className=\"form-group\">\r\n                <input type=\"email\" name=\"username\"\r\n                  onChange={this.handleUsernameChange}\r\n                  className=\"form-control border-radius\" id=\"email\"\r\n                  placeholder=\"example@gmail.com\" />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <input type=\"password\" name=\"password\"\r\n                  className=\"form-control border-radius\" id=\"pwd\"\r\n                  onChange={this.handleEmailChange}\r\n                  placeholder=\"********\" />\r\n              </div>\r\n              <div className=\"text-danger\">{this.state.error}</div>\r\n\r\n              <button type=\"submit\" className=\"btn-xl\">Sign In</button>\r\n            </form>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\nexport default AppComponent\r\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Sidebar() {\n\n    return (\n        <div className=\"sidenav\">\n            <div>\n                <Link to=\"/users\">\n                    <label className=\"color\">Users</label>\n                </Link>\n            </div>\n\n            <div >\n                <Link to=\"/dashboard\">\n                    <label className=\"color\">Dashboard</label>\n                </Link>\n            </div>\n            <div >\n                <Link to=\"/logs\">\n                    <label className=\"color\">Logs</label>\n                </Link>\n            </div>\n            <div>\n                <Link to=\"/\">\n                    <label className=\"color\">Signout</label>\n                </Link>\n            </div>\n        </div >\n\n    )\n}\nexport default Sidebar\n","import React from 'react';\nimport Sidebar from './sidebar';\nimport { Card, Table } from 'antd';\nconst columns = [\n    {\n        title: 'First Name',\n        dataIndex: 'firstName',\n        key: '1',\n    },\n    {\n        title: 'Last Name',\n        dataIndex: 'lastName',\n        key: '2',\n    },\n    {\n        title: 'Phone Number',\n        dataIndex: 'phoneNumber',\n        key: '3',\n    },\n    {\n        title: 'Address',\n        dataIndex: 'Address',\n        key: '4',\n    }\n];\nclass Users extends React.Component<any, any>{\n    public render() {\n        console.log(this.props)\n        return (\n            <div className=\"row p-3\">\n                <div className=\"col-lg-2\" id=\"sidebar\">\n                    <Sidebar />\n                </div>\n\n\n                <div className=\"col-lg-10\">\n                    <div className=\"row p-3\">\n                        <Card style={{ width: 500 }}>\n                            <label className=\"font-size\">Active Users</label>\n                            <h4 className=\"font-size\">{this.props.location.state.activeUsers}</h4>\n                        </Card>\n                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                        <Card style={{ width: 500 }}>\n                            <label className=\"font-size\">In Active Users</label>\n                            <h4 className=\"font-size\">{this.props.location.state.inactiveUsers}</h4>\n                        </Card>\n                    </div>\n\n                    <Card>\n                        <label className=\"font-size\">User Logs</label>\n                        <Table dataSource={this.props.location.state.userLogs} columns={columns} />;\n                    </Card>\n\n                </div>\n            </div>\n        );\n    }\n}\nexport default Users\n","import React from 'react';\r\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\r\nimport '../assets/vendors/style';\r\nimport '../assets/styles/wieldy.less';\r\nimport App from './containers/App/index';\r\nimport Users from './containers/App/users';\r\n\r\nconst NextApp = () =>\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route exact path='/' component={App} />\r\n      <Route exact path='/users' component={Users} />\r\n    </Switch>\r\n  </BrowserRouter>\r\n\r\nexport default NextApp;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport NextApp from './module/NextApp';\nimport { AppContainer } from 'react-hot-loader';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst render = (Component: any) => {\n  ReactDOM.render(\n    // Wrap App inside AppContainer\n    <AppContainer>\n      <Component />\n    </AppContainer>,\n    document.getElementById('root')\n  );\n};\n\n// Render once\nrender(NextApp);\n\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n// tslint:disable-next-line no-any\ndeclare let module: { hot: any };\n// Webpack Hot Module Replacement API\nif (module.hot) {\n  module.hot.accept('./module/NextApp', () => {\n    render(NextApp);\n  });\n}"],"sourceRoot":""}